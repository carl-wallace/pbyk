//! Program arguments

use clap::{error::ErrorKind, Parser, ValueEnum};
use serde::{Deserialize, Serialize};
use std::{fmt, str::FromStr};

/// Identifies the operational environments supported by `pbyk`
#[derive(Clone, Debug, Eq, PartialEq, ValueEnum, Serialize, Deserialize)]
#[allow(non_camel_case_types)]
#[allow(clippy::upper_case_acronyms)]
pub enum Environment {
    #[cfg(feature = "dev")]
    /// Development environment hosted by Red Hound Software
    DEV,
    #[cfg(feature = "om_nipr")]
    /// Test environment hosted at Fort Meade for NIPR
    OM_NIPR,
    #[cfg(feature = "om_sipr")]
    /// Test environment hosted at Fort Meade for SIPR
    OM_SIPR,
    #[cfg(feature = "nipr")]
    /// Production environment for NIPR
    NIPR,
    #[cfg(feature = "sipr")]
    /// Production environment for SIPR
    SIPR,
}

impl fmt::Display for Environment {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "{:?}", self)
    }
}
impl FromStr for Environment {
    type Err = clap::Error;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let binding = s.to_ascii_lowercase();
        let val = binding.as_str();
        #[cfg(feature = "dev")]
        {
            if "dev" == val {
                return Ok(Environment::DEV);
            }
        }
        #[cfg(feature = "om_nipr")]
        {
            if "om_nipr" == val {
                return Ok(Environment::OM_NIPR);
            }
        }
        #[cfg(feature = "om_sipr")]
        {
            if "om_sipr" == val {
                return Ok(Environment::OM_SIPR);
            }
        }
        #[cfg(feature = "nipr")]
        {
            if "nipr" == val {
                return Ok(Environment::NIPR);
            }
        }
        #[cfg(feature = "sipr")]
        {
            if "sipr" == val {
                return Ok(Environment::SIPR);
            }
        }
        Err(clap::error::Error::new(ErrorKind::UnknownArgument))
    }
}

/// Returns number of environments supported at run-time.
///
/// The number returned by this function is equal to the number of environment-related features that
/// were enabled at compile time. For example, when pbyk is compiled with `--features sipr` this
/// function will return two (i.e., for sipr and dev). When compiled with
/// `--no-default-features --features sipr`, this function will return one (i.e., for sipr).
pub(crate) fn num_environments() -> u8 {
    let mut count = 0;
    #[cfg(feature = "dev")]
    {
        count += 1;
    }
    #[cfg(feature = "om_nipr")]
    {
        count += 1;
    }
    #[cfg(feature = "om_sipr")]
    {
        count += 1;
    }
    #[cfg(feature = "nipr")]
    {
        count += 1;
    }
    #[cfg(feature = "sipr")]
    {
        count += 1;
    }
    count
}

/// Defines options used by the `pbyk` utility
///
/// The available options depend on the elected features. The example below was prepared using `--features om_sipr,sipr,gui,vsc`.
///
/// ```text
/// Usage: pbyk [OPTIONS]
///
/// Options:
///   -h, --help     Print help (see more with '--help')
///   -V, --version  Print version
///
/// Arguments:
///   -a, --agent-edipi <AGENT_EDIPI>  EDIPI of Purebred Agent who provided the pre_enroll_otp or enroll_otp value
///   -s, --serial <SERIAL>            Serial number of YubiKey or virtual smart card (VSC) to provision (available devices can be listed using list_yubikeys or list_vscs); this is not required if only one YubiKey or VSC is present
///   -e, --environment <ENVIRONMENT>  Environment to target [possible values: dev, om-sipr, sipr]
///
/// Actions:
///   -1, --pre-enroll-otp <PRE_ENROLL_OTP>
///           Pre-enrollment OTP provided by Purebred Agent identified by agent_edipi
///   -2, --enroll-otp <ENROLL_OTP>
///           Enrollment OTP provided by Purebred Agent identified by agent_edipi
///   -3, --ukm-otp <UKM_OTP>
///           OTP generated by user associated with the device on the Purebred portal
///   -4, --recover-otp <RECOVER_OTP>
///           OTP generated by user associated with the device on the Purebred portal
///
/// Diagnostics:
///   -p, --portal-status-check  Connect to status interface on portal to affirm network connectivity
///   -k, --scep-check           Connect to status interface on CA to affirm network connectivity
///
/// Utilities:
///   -y, --list-yubikeys  Lists available YubiKey devices, if any
///   -v, --list-vscs      Lists available virtual smart card (VSC) devices, if any
///   -r, --reset-device   Resets the indicated device to a default state using a management key expected by Purebred applications
///   -i, --interactive    Run pbyk as command line app
///
/// Logging:
///   -l, --logging-config <LOGGING_CONFIG>
///           Full path and filename of YAML-formatted configuration file for log4rs logging mechanism. See https://docs.rs/log4rs/latest/log4rs/ for details
///   -c, --log-to-console
///           Log output to the console
/// ```
#[derive(Parser, Debug, Serialize, Deserialize, Default)]
#[command(arg_required_else_help(true))]
#[command(author, version, about = "", long_about = "")]
pub struct PbYkArgs {
    /// EDIPI of Purebred Agent who provided the pre_enroll_otp or enroll_otp value
    #[clap(
        long,
        short = 'a',
        help_heading = "Arguments",
        conflicts_with = "ukm_otp",
        conflicts_with = "recover_otp",
        conflicts_with = "list_yubikeys",
        conflicts_with = "reset_device"
    )]
    pub agent_edipi: Option<String>,

    /// Serial number of YubiKey or virtual smart card (VSC) to provision (available devices can be listed using list_yubikeys or list_vscs);
    /// this is not required if only one YubiKey or VSC is present.
    #[clap(
        long,
        short = 's',
        help_heading = "Arguments",
        conflicts_with = "list_yubikeys"
    )]
    pub serial: Option<String>,

    /// Environment to target
    #[clap(
        long,
        short = 'e',
        help_heading = "Arguments",
        conflicts_with = "list_yubikeys",
        conflicts_with = "reset_device",
        value_enum
    )]
    pub environment: Option<Environment>,

    /// Pre-enrollment OTP provided by Purebred Agent identified by agent_edipi
    #[clap(
        long,
        short = '1',
        action,
        help_heading = "Actions",
        conflicts_with = "enroll_otp",
        conflicts_with = "ukm_otp",
        conflicts_with = "recover_otp",
        requires = "agent_edipi"
    )]
    pub pre_enroll_otp: Option<String>,
    #[clap(
        long,
        short = '2',
        action,
        help_heading = "Actions",
        conflicts_with = "pre_enroll_otp",
        conflicts_with = "ukm_otp",
        conflicts_with = "recover_otp",
        requires = "agent_edipi"
    )]
    /// Enrollment OTP provided by Purebred Agent identified by agent_edipi
    pub enroll_otp: Option<String>,

    /// OTP generated by user associated with the device on the Purebred portal
    #[clap(
        long,
        short = '3',
        action,
        help_heading = "Actions",
        conflicts_with = "pre_enroll_otp",
        conflicts_with = "enroll_otp",
        conflicts_with = "agent_edipi",
        conflicts_with = "recover_otp"
    )]
    pub ukm_otp: Option<String>,

    /// OTP generated by user associated with the device on the Purebred portal
    #[clap(
        long,
        short = '4',
        action,
        help_heading = "Actions",
        conflicts_with = "pre_enroll_otp",
        conflicts_with = "enroll_otp",
        conflicts_with = "ukm_otp",
        conflicts_with = "agent_edipi"
    )]
    pub recover_otp: Option<String>,

    /// Connect to status interface on portal to affirm network connectivity
    #[clap(
        long,
        short,
        action,
        help_heading = "Diagnostics",
        conflicts_with = "pre_enroll_otp",
        conflicts_with = "enroll_otp",
        conflicts_with = "ukm_otp",
        conflicts_with = "agent_edipi"
    )]
    pub portal_status_check: bool,

    /// Connect to status interface on CA to affirm network connectivity
    #[clap(
        long,
        short = 'k',
        action,
        help_heading = "Diagnostics",
        conflicts_with = "pre_enroll_otp",
        conflicts_with = "enroll_otp",
        conflicts_with = "ukm_otp",
        conflicts_with = "agent_edipi"
    )]
    pub scep_check: bool,

    /// Lists available YubiKey devices, if any
    #[clap(
        long,
        short = 'y',
        action,
        help_heading = "Utilities",
        conflicts_with = "pre_enroll_otp",
        conflicts_with = "enroll_otp",
        conflicts_with = "ukm_otp",
        conflicts_with = "agent_edipi",
        conflicts_with = "portal_status_check"
    )]
    pub list_yubikeys: bool,

    /// Lists available virtual smart card (VSC) devices, if any
    #[cfg(all(target_os = "windows", feature = "vsc"))]
    #[clap(
        long,
        short = 'v',
        action,
        help_heading = "Utilities",
        conflicts_with = "list_yubikeys",
        conflicts_with = "pre_enroll_otp",
        conflicts_with = "enroll_otp",
        conflicts_with = "ukm_otp",
        conflicts_with = "agent_edipi",
        conflicts_with = "portal_status_check"
    )]
    pub list_vscs: bool,

    /// Resets the indicated device to a default state using a management key expected by Purebred applications
    #[clap(
        long,
        short,
        action,
        help_heading = "Utilities",
        conflicts_with = "pre_enroll_otp",
        conflicts_with = "enroll_otp",
        conflicts_with = "ukm_otp",
        conflicts_with = "agent_edipi",
        conflicts_with = "list_yubikeys",
        conflicts_with = "portal_status_check"
    )]
    pub reset_device: bool,

    #[allow(rustdoc::bare_urls)]
    /// Full path and filename of YAML-formatted configuration file for log4rs logging mechanism.
    /// See https://docs.rs/log4rs/latest/log4rs/ for details.
    #[clap(
        long,
        action,
        short = 'l',
        help_heading = "Logging",
        conflicts_with = "log_to_console"
    )]
    pub logging_config: Option<String>,

    /// Log output to the console
    #[clap(
        long,
        short = 'c',
        action,
        help_heading = "Logging",
        conflicts_with = "logging_config"
    )]
    pub log_to_console: bool,

    #[cfg(feature = "gui")]
    /// Run pbyk as command line app
    ///
    /// Only available when "gui" feature is in effect.
    #[clap(long, short = 'i', action, help_heading = "Utilities")]
    pub interactive: bool,
    // TODO: add option to stifle hiding the console window when running GUI on Windows
}

#[cfg(not(any(
    feature = "sipr",
    feature = "om_sipr",
    feature = "dev",
    feature = "om_nipr",
    feature = "nipr"
)))]
compile_error! {
    "At least one of feature \"dev\", \"om\", \"om_nipr\", \"om_sipr\", or \"sipr\" must be enabled for this crate."
}

#[cfg(all(
    any(feature = "vsc", feature = "reset_vsc"),
    not(target_os = "windows")
))]
compile_error! {
    "The `vsc` and `reset_vsc` features are only available for Windows systems."
}
