//! Imports a PKCS12 object into a YubiKey

use std::sync::Once;

use log::{error, info};
use openssl::pkcs12::Pkcs12;
use rsa::pkcs1::RsaPrivateKey;

use const_oid::db::rfc5912::{ID_CE_KEY_USAGE, ID_CE_SUBJECT_ALT_NAME};
use der::Decode;
use x509_cert::{
    ext::pkix::{name::GeneralName, KeyUsage, KeyUsages, SubjectAltName},
    Certificate,
};
use yubikey::{
    certificate::CertInfo,
    piv::{import_rsa_key, AlgorithmId, RetiredSlotId, RsaKeyData, SlotId, SlotId::KeyManagement},
    PinPolicy, TouchPolicy, YubiKey,
};

use crate::{Error, Result};

static INIT: Once = Once::new();

/// Gets a SlotId from the index of a given PKCS 12 object within a configuration profile. The
/// following logic is used:
/// - When index is 0, KeyManagement is used (i.e., the current decryption key)
/// - When index is > 0 and < 20, the 0x81 is added to index to determine slot
/// - For all other values, R20 is returned (the highest retired slot)
/// This function assumes that the certificate has already been analyzed to determine it is not a
/// signature cert or authentication cert.
pub(crate) fn get_slot_from_index(index: u8) -> SlotId {
    if 0 == index {
        KeyManagement
    } else {
        let rs: RetiredSlotId = match (index + 0x81).try_into() {
            Ok(rs) => rs,
            Err(_e) => RetiredSlotId::R20,
        };
        SlotId::Retired(rs)
    }
}

/// get_slot_from_sig_or_auth_cert inspects the KeyUsage and SubjectAltName extensions to determine
/// which slot a key should be imported into. This function MUST only be used with signature or
/// authentication certificates (the slot for decryption certificates is determined by the order
/// of appearance in the plist). If key usage does not feature DigitalSignature, Error::BadInput is
/// returned. If DigitalSignature is present, SubjectAltName is inspected. If an OtherName value is
/// present, SlotId::Authentication is returned, if not SlotId::Signature or an error is returned.
fn get_slot_from_sig_or_auth_cert(cert: &Certificate) -> Result<SlotId> {
    if Ok(true) != check_digital_signature(cert) {
        error!("Certificate did not contain KeyUsage with DigitalSignature so SlotId could not be determined");
        return Err(Error::BadInput);
    }

    match san_has_other_name(cert) {
        Ok(true) => Ok(SlotId::Authentication),
        Ok(false) => Ok(SlotId::Signature),
        Err(e) => Err(e),
    }
}

/// san_has_other_name returns true if a SubjectAltName extension is present (and can be parsed) and
/// contains an OtherName value and false if OtherName is not present. If the SAN extension cannot be
/// parsed an error is returned. Only the first appearance of SubjectAltName is inspected.
fn san_has_other_name(cert: &Certificate) -> Result<bool> {
    if let Some(exts) = &cert.tbs_certificate.extensions {
        for ext in exts {
            if ext.extn_id == ID_CE_SUBJECT_ALT_NAME {
                let san = SubjectAltName::from_der(ext.extn_value.as_bytes())?;
                for gn in san.0.iter() {
                    if let GeneralName::OtherName(_on) = gn {
                        return Ok(true);
                    }
                }
                return Ok(false);
            }
        }
    }
    Ok(false)
}

/// check_key_usage takes a certificate and a key usage value and returns true if a KeyUsage extension
/// is present that contains that value and false otherwise. If KeyUsage extension cannot be parsed
/// or is no KeyUsage extension is present, an error is returned.
fn check_key_usage(cert: &Certificate, ku_to_check: KeyUsages) -> Result<bool> {
    if let Some(exts) = &cert.tbs_certificate.extensions {
        for ext in exts {
            if ext.extn_id == ID_CE_KEY_USAGE {
                let ku = KeyUsage::from_der(ext.extn_value.as_bytes())?;
                if ku.0.contains(ku_to_check) {
                    return Ok(true);
                } else {
                    return Ok(false);
                }
            }
        }
    }
    error!("key usage extension is missing");
    Err(Error::KeyUsageMissing)
}

/// check_digital_signature takes a certificate returns true if a KeyUsage extension is present that
/// contains DigitalSignature and false otherwise. If KeyUsage extension cannot be parsed or is no
/// KeyUsage extension is present, an error is returned.
fn check_digital_signature(cert: &Certificate) -> Result<bool> {
    check_key_usage(cert, KeyUsages::DigitalSignature)
}

/// check_digital_signature takes a certificate returns true if a KeyUsage extension is present that
/// contains KeyEncipherment and false otherwise. If KeyUsage extension cannot be parsed or is no
/// KeyUsage extension is present, an error is returned.
fn check_key_enciphment(cert: &Certificate) -> Result<bool> {
    check_key_usage(cert, KeyUsages::KeyEncipherment)
}

/// Writes the key and certificate extracted from `enc_p12` to the indicated YubiKey and slot
/// (if provided). If not slot is provided, the key usage and subject alt name extensions are
/// considered. Where key usage is signature, if the SAN has an OtherName, PIV slot is used else
/// signature slot is used. For key encipherment, the index is applied to the list of retired slots.
pub(crate) async fn import_p12(
    yubikey: &mut YubiKey,
    enc_p12: &[u8],
    password: &str,
    recovered_index: u8,
    slot_id: Option<SlotId>,
) -> Result<Vec<u8>> {
    INIT.call_once(|| {
        openssl::init();
    });

    let pkcs12 = match Pkcs12::from_der(enc_p12) {
        Ok(p) => p,
        Err(e) => {
            error!("Failed to parse PKCS #12 object: {e:?}");
            return Err(Error::ParseError);
        }
    };

    let p12 = match pkcs12.as_ref().parse2(password) {
        Ok(p12) => p12,
        Err(e) => {
            error!("Failed to process PKCS #12 object: {e:?}");
            return Err(Error::ParseError);
        }
    };

    let der_cert = match p12.cert {
        Some(c) => match c.to_der() {
            Ok(der) => der,
            Err(e) => {
                error!("Failed to encode certificate from PKCS #12 object: {e:?}");
                return Err(Error::ParseError);
            }
        },
        None => {
            error!("Failed to read certificate from PKCS #12 object");
            return Err(Error::ParseError);
        }
    };

    let cert = match Certificate::from_der(&der_cert) {
        Ok(cert) => yubikey::certificate::Certificate { cert },
        Err(e) => return Err(Error::Asn1(e)),
    };

    let slot = match slot_id {
        Some(s) => s,
        None => match check_key_enciphment(&cert.cert) {
            Ok(true) => get_slot_from_index(recovered_index),
            Ok(false) => match get_slot_from_sig_or_auth_cert(&cert.cert) {
                Ok(s) => s,
                Err(e) => {
                    error!("Failed to determine type of certificate from PKCS #12 object: {e:?}");
                    return Err(Error::ParseError);
                }
            },
            Err(e) => {
                error!("Failed to determine type of certificate from PKCS #12 object: {e:?}");
                return Err(Error::ParseError);
            }
        },
    };

    let der_key = match p12.pkey {
        Some(k) => match k.rsa() {
            Ok(rsa) => match rsa.private_key_to_der() {
                Ok(der) => der,
                Err(e) => {
                    error!("Failed to encode RSA key from PKCS #12 object for {slot} slot: {e:?}");
                    return Err(Error::ParseError);
                }
            },
            Err(e) => {
                error!("Failed to get RSA key from PKCS #12 object for {slot} slot: {e:?}");
                return Err(Error::ParseError);
            }
        },
        None => {
            error!("Failed to get key from PKCS #12 object for {slot} slot");
            return Err(Error::ParseError);
        }
    };

    let rpk = match RsaPrivateKey::from_der(&der_key) {
        Ok(rpk) => rpk,
        Err(e) => {
            error!("Failed to parse RSA key from PKCS #12 object for {slot} slot: {e:?}");
            return Err(Error::Asn1(e));
        }
    };

    let rkd = match RsaKeyData::new(rpk.prime1.as_bytes(), rpk.prime2.as_bytes()) {
        Ok(rkd) => rkd,
        Err(e) => {
            error!("Failed to instantiate new RSA key object from PKCS #12 for {slot} slot: {e}");
            return Err(Error::ParseError);
        }
    };
    if let Err(e) = import_rsa_key(
        yubikey,
        slot,
        AlgorithmId::Rsa2048,
        rkd,
        TouchPolicy::Default,
        PinPolicy::Default,
    ) {
        error!(
            "Failed to import RSA key from PKCS #12 object into slot {slot}: {:?}",
            e
        );
        return Err(Error::YubiKey(e));
    }

    if let Err(e) = cert.write(yubikey, slot, CertInfo::Uncompressed) {
        error!(
            "Failed to import certificate from PKCS #12 object into slot {slot}: {:?}",
            e
        );
        return Err(Error::YubiKey(e));
    }

    info!("Installed PKCS #12 into {slot} slot");
    Ok(der_cert)
}

#[test]
fn categorize_sig_cert() {
    use hex_literal::hex;
    let der_cert = hex
    let cert = Certificate::from_der(&der_cert).unwrap();
    let slot_id = get_slot_from_sig_or_auth_cert(&cert).unwrap();
    assert_eq!(SlotId::Signature, slot_id);
}

#[test]
fn categorize_auth_cert() {
    use hex_literal::hex;
    let der_cert = hex
    let cert = Certificate::from_der(&der_cert).unwrap();
    let slot_id = get_slot_from_sig_or_auth_cert(&cert).unwrap();
    assert_eq!(SlotId::Authentication, slot_id);
}

#[test]
fn categorize_enc_cert() {
    use hex_literal::hex;
    let der_cert = hex
    let cert = Certificate::from_der(&der_cert).unwrap();
    assert!(get_slot_from_sig_or_auth_cert(&cert).is_err());
    assert!(check_key_enciphment(&cert).unwrap());
}

// todo: remove this when openssl is bumped beyond version 10.55
#[tokio::test]
async fn p12_test_rc2() {
    use hex_literal::hex;
    let enc_p12 = hex
    let password = "HO@@Oy7.i8qMF|K[(\\'n";
    openssl::init();

    let pkcs12 = match Pkcs12::from_der(&enc_p12) {
        Ok(p) => p,
        Err(_e) => {
            panic!();
        }
    };

    let _p12 = match pkcs12.as_ref().parse2(password) {
        Ok(p12) => p12,
        Err(_e) => {
            panic!();
        }
    };
}

#[tokio::test]
async fn p12_test_aes() {
    use hex_literal::hex;
    let enc_p12 = hex
    let password = "@7{Xv0{>H/=xP$i0ObTRVz|M4<wh+r3N&?4{b!l{RS!KYf&q/y_813d&skN,CE{WSA#til>?:cRLo9^=i_(BGfwf:L<~3o1p{$aO:dhm-|u58gOeJ^#RD.s9L\\&Eit#S";
    openssl::init();

    let pkcs12 = match Pkcs12::from_der(&enc_p12) {
        Ok(p) => p,
        Err(_e) => {
            panic!();
        }
    };

    let _p12 = match pkcs12.as_ref().parse2(password) {
        Ok(p12) => p12,
        Err(_e) => {
            panic!();
        }
    };
}
